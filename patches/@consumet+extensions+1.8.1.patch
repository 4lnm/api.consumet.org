diff --git a/node_modules/@consumet/extensions/dist/providers/anime/animeowl.d.ts b/node_modules/@consumet/extensions/dist/providers/anime/animeowl.d.ts
index e4103cd..e69de29 100644
--- a/node_modules/@consumet/extensions/dist/providers/anime/animeowl.d.ts
+++ b/node_modules/@consumet/extensions/dist/providers/anime/animeowl.d.ts
@@ -1,75 +0,0 @@
-import { AnimeParser, ISearch, IAnimeInfo, IAnimeResult, ISource, IEpisodeServer, StreamingServers, SubOrSub } from '../../models';
-declare class AnimeOwl extends AnimeParser {
-    readonly name = "AnimeOwl";
-    protected baseUrl: string;
-    protected apiUrl: string;
-    protected logo: string;
-    protected classPath: string;
-    constructor(customBaseURL?: string);
-    /**
-     * @param query Search query
-     * @param page Page number (optional)
-     */
-    search: (query: string, page?: number) => Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param page number
-     */
-    fetchTopAiring(page?: number): Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param page number
-     */
-    fetchRecentlyUpdated(page?: number): Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param page number
-     */
-    fetchMovie(page?: number): Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param page number
-     */
-    fetchTV(page?: number): Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param page number
-     */
-    fetchOVA(page?: number): Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param page number
-     */
-    fetchONA(page?: number): Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param page number
-     */
-    fetchSpecial(page?: number): Promise<ISearch<IAnimeResult>>;
-    fetchGenres(): Promise<string[]>;
-    /**
-     * @param page number
-     */
-    genreSearch(genre: string, page?: number): Promise<ISearch<IAnimeResult>>;
-    fetchSpotlight(): Promise<ISearch<IAnimeResult>>;
-    fetchSearchSuggestions(query: string): Promise<ISearch<IAnimeResult>>;
-    /**
-     * @param id Anime id
-     */
-    fetchAnimeInfo: (id: string) => Promise<IAnimeInfo>;
-    /**
-     *
-     * @param episodeId Episode id
-     * @param server server type (default `VidCloud`) (optional)
-     * @param subOrDub sub or dub (default `SubOrSub.SUB`) (optional)
-     */
-    fetchEpisodeSources: (episodeId: string, server?: StreamingServers, subOrDub?: SubOrSub) => Promise<ISource>;
-    /**
-     * @param url string
-     */
-    private scrapeCardPage;
-    /**
-     * @param $ cheerio instance
-     */
-    private scrapeCard;
-    /**
-     * @param episodeId Episode id
-     * @param subOrDub sub or dub (default `sub`) (optional)
-     */
-    fetchEpisodeServers: (episodeId: string, subOrDub?: SubOrSub) => Promise<IEpisodeServer[]>;
-    private parseEpisodes;
-}
-export default AnimeOwl;
diff --git a/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js b/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js
index 29a30f1..e69de29 100644
--- a/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js
+++ b/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js
@@ -1,503 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const cheerio_1 = require("cheerio");
-const models_1 = require("../../models");
-const utils_1 = require("../../utils");
-class AnimeOwl extends models_1.AnimeParser {
-    constructor(customBaseURL) {
-        super(...arguments);
-        this.name = 'AnimeOwl';
-        this.baseUrl = 'https://animeowl.me';
-        this.apiUrl = 'https://animeowl.me/api';
-        this.logo = 'https://animeowl.me/images/favicon-96x96.png';
-        this.classPath = 'ANIME.AnimeOwl';
-        /**
-         * @param query Search query
-         * @param page Page number (optional)
-         */
-        this.search = async (query, page = 1) => {
-            if (0 >= page) {
-                page = 1;
-            }
-            const { data } = await this.client.post(`${this.apiUrl}/advance-search`, {
-                clicked: false,
-                limit: 24,
-                page: page - 1,
-                pageCount: 1,
-                value: query,
-                selected: {
-                    type: [],
-                    genre: [],
-                    year: [],
-                    country: [],
-                    season: [],
-                    status: [],
-                    sort: [],
-                    language: [],
-                },
-                results: [],
-                lang22: 3,
-                sortt: 4,
-            });
-            const res = {
-                currentPage: page,
-                hasNextPage: page < Math.ceil(data.total / 24),
-                totalPages: Math.ceil(data.total / 24),
-                results: [],
-            };
-            res.results = data.results.map((item) => ({
-                id: `${item.anime_slug}$${item.anime_id}`,
-                title: item.en_name || item.anime_name,
-                url: `${this.baseUrl}/anime/${item.anime_slug}`,
-                image: `${this.baseUrl}${item.image}` ||
-                    `${this.baseUrl}${item.thumbnail}` ||
-                    `${this.baseUrl}${item.webp}`,
-                japaneseTitle: item.jp_name,
-                sub: parseInt(item.total_episodes) || 0,
-                dub: parseInt(item.total_dub_episodes) || 0,
-                episodes: parseInt(item.total_episodes) || 0,
-            }));
-            return res;
-        };
-        /**
-         * @param id Anime id
-         */
-        this.fetchAnimeInfo = async (id) => {
-            var _a, _b;
-            const info = {
-                id: id,
-                title: '',
-            };
-            try {
-                const { data } = await this.client.get(`${this.baseUrl}/anime/${id.split('$')[0]}`);
-                const $ = (0, cheerio_1.load)(data);
-                info.title = $('h1.anime-name').text();
-                info.japaneseTitle = $('h2.anime-romaji').text();
-                info.image = `${this.baseUrl}${$('div.cover-img-container >img').attr('src')}`;
-                info.description = $('div.anime-desc')
-                    .text()
-                    .replace(/\s*\n\s*/g, ' ')
-                    .trim();
-                // Movie, TV, OVA, ONA, Special, Music
-                info.type = $('div.type > a').text().toUpperCase();
-                info.url = `${this.baseUrl}/anime/${id.split('$')[0]}`;
-                // info.recommendations = await this.scrapeCard($);
-                const hasSub = $('div#anime-cover-sub-content > div.nav-container > ul#episode-list > li.nav-item').length > 0;
-                const hasDub = $('div#anime-cover-dub-content > div.nav-container > ul#episode-list > li.nav-item').length > 0;
-                if (hasSub) {
-                    info.subOrDub = models_1.SubOrSub.SUB;
-                    info.hasSub = hasSub;
-                }
-                if (hasDub) {
-                    info.subOrDub = models_1.SubOrSub.DUB;
-                    info.hasDub = hasDub;
-                }
-                if (hasSub && hasDub) {
-                    info.subOrDub = models_1.SubOrSub.BOTH;
-                }
-                info.genres = [];
-                $('div.genre')
-                    .find('a')
-                    .each(function () {
-                    var _a;
-                    const genre = $(this).text().trim();
-                    if (genre != undefined)
-                        (_a = info.genres) === null || _a === void 0 ? void 0 : _a.push(genre);
-                });
-                switch ($('div.status > span').text().trim()) {
-                    case 'Finished Airing':
-                        info.status = models_1.MediaStatus.COMPLETED;
-                        break;
-                    case 'Currently Airing':
-                        info.status = models_1.MediaStatus.ONGOING;
-                        break;
-                    case 'Not yet aired':
-                        info.status = models_1.MediaStatus.NOT_YET_AIRED;
-                        break;
-                    default:
-                        info.status = models_1.MediaStatus.UNKNOWN;
-                        break;
-                }
-                info.season = $('div.premiered')
-                    .text()
-                    .replace(/\s*\n\s*/g, ' ')
-                    .replace('Premiered: ', '')
-                    .trim();
-                let totalSubEpisodes = parseInt($('div#anime-cover-sub-content > div.nav-container > ul#episode-list > li.nav-item')
-                    .last()
-                    .text()
-                    .split('-')[1]
-                    .trim());
-                let totalDubEpisodes = parseInt((_b = (_a = $('div#anime-cover-dub-content > div.nav-container > ul#episode-list > li.nav-item')
-                    .last()
-                    .text()
-                    .split('-')[1]) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : '0');
-                info.totalEpisodes = totalSubEpisodes > totalDubEpisodes ? totalSubEpisodes : totalDubEpisodes;
-                info.episodes = [];
-                const subEpisodes = this.parseEpisodes($, '#anime-cover-sub-content .episode-node', models_1.SubOrSub.SUB);
-                const dubEpisodes = this.parseEpisodes($, '#anime-cover-dub-content .episode-node', models_1.SubOrSub.DUB);
-                const groupedMap = new Map();
-                //passing the anime id with episode id for get request in fetchEpisodeServers
-                for (const sub of subEpisodes) {
-                    groupedMap.set(sub.title, {
-                        id: `${id.split('$')[0]}$${sub.id}`,
-                        title: sub.title,
-                        number: sub.number,
-                        url: sub.url,
-                        isSubbed: true,
-                        isDubbed: false,
-                    });
-                }
-                for (const dub of dubEpisodes) {
-                    if (groupedMap.has(dub.title)) {
-                        const entry = groupedMap.get(dub.title);
-                        entry.id = `${entry.id}&${dub.id}`; //combining the sub and dub episode ids
-                        entry.isDubbed = true;
-                    }
-                    else {
-                        groupedMap.set(dub.title, {
-                            id: `${id.split('$')[0]}$${dub.id}`,
-                            title: dub.title,
-                            number: dub.number,
-                            url: dub.url,
-                            isSubbed: false,
-                            isDubbed: true,
-                        });
-                    }
-                }
-                info.episodes = Array.from(groupedMap.values());
-                return info;
-            }
-            catch (err) {
-                throw new Error(err.message);
-            }
-        };
-        /**
-         *
-         * @param episodeId Episode id
-         * @param server server type (default `VidCloud`) (optional)
-         * @param subOrDub sub or dub (default `SubOrSub.SUB`) (optional)
-         */
-        this.fetchEpisodeSources = async (episodeId, server = models_1.StreamingServers.Luffy, subOrDub = models_1.SubOrSub.SUB) => {
-            if (episodeId.startsWith('http')) {
-                const serverUrl = new URL(episodeId);
-                switch (server) {
-                    case models_1.StreamingServers.Luffy:
-                        return {
-                            headers: { Referer: serverUrl.href },
-                            sources: await new utils_1.Luffy().extract(serverUrl),
-                        };
-                    default:
-                        return {
-                            headers: { Referer: serverUrl.href },
-                            sources: await new utils_1.Luffy().extract(serverUrl),
-                        };
-                }
-            }
-            try {
-                const servers = await this.fetchEpisodeServers(episodeId, subOrDub);
-                const i = servers.findIndex(s => s.name.toLowerCase() === server.toLowerCase());
-                if (i === -1) {
-                    throw new Error(`Server ${server} not found`);
-                }
-                const serverUrl = new URL(servers[i].url);
-                const sources = await this.fetchEpisodeSources(serverUrl.href, server, subOrDub);
-                return sources;
-            }
-            catch (err) {
-                throw err;
-            }
-        };
-        /**
-         * @param url string
-         */
-        this.scrapeCardPage = async (url, headers) => {
-            var _a;
-            try {
-                const res = {
-                    currentPage: 0,
-                    hasNextPage: false,
-                    totalPages: 0,
-                    results: [],
-                };
-                const { data } = await this.client.get(url, headers);
-                const $ = (0, cheerio_1.load)(data);
-                const pagination = $('ul.pagination');
-                res.currentPage = parseInt((_a = pagination.find('li.page-item.active')) === null || _a === void 0 ? void 0 : _a.text()) || 1;
-                const nextPage = pagination.find('li:has(a[aria-label="Next page"])');
-                res.hasNextPage = !nextPage.hasClass('disabled');
-                let lastPageText = 0;
-                pagination.find('li.page-item a').each((_, el) => {
-                    const text = parseInt($(el).text().trim());
-                    if (!isNaN(text)) {
-                        lastPageText = Math.max(lastPageText, text);
-                    }
-                });
-                res.totalPages = lastPageText || res.currentPage;
-                res.results = await this.scrapeCard($);
-                if (res.results.length === 0) {
-                    res.currentPage = 0;
-                    res.hasNextPage = false;
-                    res.totalPages = 0;
-                }
-                return res;
-            }
-            catch (err) {
-                throw new Error('Something went wrong. Please try again later.');
-            }
-        };
-        /**
-         * @param $ cheerio instance
-         */
-        this.scrapeCard = async ($) => {
-            try {
-                const results = [];
-                $('#anime-list .recent-anime.anime-vertical').each((i, ele) => {
-                    var _a, _b, _c, _d, _e, _f, _g;
-                    const card = $(ele);
-                    const atag = card.find('a.post-thumb');
-                    const id = (_a = atag.attr('href')) === null || _a === void 0 ? void 0 : _a.split(`${this.baseUrl}/anime/`)[1];
-                    const type = card.find('.anime-type span').text().trim();
-                    results.push({
-                        id: id,
-                        title: (_b = card.find('img')) === null || _b === void 0 ? void 0 : _b.attr('alt'),
-                        url: `${atag.attr('href')}`,
-                        image: ((_c = card.find('img')) === null || _c === void 0 ? void 0 : _c.attr('data-src')) || ((_d = card.find('img')) === null || _d === void 0 ? void 0 : _d.attr('src')),
-                        type: type,
-                        sub: parseInt((_e = card.find('.misc-info .anime-duration span')) === null || _e === void 0 ? void 0 : _e.eq(0).text()) || 0,
-                        dub: parseInt((_f = card.find('.misc-info .anime-duration span')) === null || _f === void 0 ? void 0 : _f.eq(1).text()) || 0,
-                        episodes: parseInt((_g = card.find('.misc-info .anime-duration span')) === null || _g === void 0 ? void 0 : _g.eq(0).text()) || 0,
-                    });
-                });
-                return results;
-            }
-            catch (err) {
-                throw new Error('Something went wrong. Please try again later.');
-            }
-        };
-        /**
-         * @param episodeId Episode id
-         * @param subOrDub sub or dub (default `sub`) (optional)
-         */
-        this.fetchEpisodeServers = async (episodeId, subOrDub = models_1.SubOrSub.SUB) => {
-            var _a, _b, _c;
-            const subEpisodeId = episodeId.split('$')[1].split('&')[0];
-            const dubEpisodeId = episodeId.split('&')[1];
-            const id = episodeId.split('$')[0];
-            const { data } = await this.client.get(`${this.baseUrl}/anime/${id}`);
-            const $ = (0, cheerio_1.load)(data);
-            const subEpisode = this.parseEpisodes($, '#anime-cover-sub-content .episode-node', models_1.SubOrSub.SUB).filter(item => item.id === subEpisodeId);
-            const dubEpisode = this.parseEpisodes($, '#anime-cover-dub-content .episode-node', models_1.SubOrSub.DUB).filter(item => item.id === dubEpisodeId);
-            let directLink = '';
-            if (subOrDub === models_1.SubOrSub.SUB) {
-                const { data: intermediary } = await this.client.get(subEpisode[0].url);
-                const $ = (0, cheerio_1.load)(intermediary);
-                directLink = (_a = $('button#hot-anime-tab')) === null || _a === void 0 ? void 0 : _a.attr('data-source');
-            }
-            if (subOrDub === models_1.SubOrSub.DUB) {
-                const { data: intermediary } = await this.client.get(dubEpisode[0].url);
-                const $ = (0, cheerio_1.load)(intermediary);
-                directLink = (_b = $('button#hot-anime-tab')) === null || _b === void 0 ? void 0 : _b.attr('data-source');
-            }
-            const { data: server } = await this.client.get(`${this.baseUrl}${directLink}`);
-            const servers = [];
-            (_c = server['luffy']) === null || _c === void 0 ? void 0 : _c.map((item) => {
-                servers.push({
-                    name: 'luffy',
-                    url: `${this.baseUrl}${directLink}`,
-                });
-            });
-            return servers;
-        };
-        this.parseEpisodes = ($, selector, subOrDub) => {
-            return $(selector)
-                .map((idx, el) => {
-                var _a, _b, _c;
-                const $el = $(el);
-                const title = (_a = $el.attr('title')) !== null && _a !== void 0 ? _a : '';
-                const id = (_b = $el.attr('id')) !== null && _b !== void 0 ? _b : '';
-                const url = ((_c = $el.attr('href')) === null || _c === void 0 ? void 0 : _c.startsWith('http')) ? $el.attr('href') : $el.prop('href');
-                const episodeNumber = Number(title);
-                // Skip if the episode number is a float
-                if (!Number.isInteger(episodeNumber)) {
-                    return null;
-                }
-                return {
-                    id: id,
-                    number: parseInt(title),
-                    title: `Ep-${title}`,
-                    url: url || '',
-                    isSubbed: subOrDub === models_1.SubOrSub.SUB,
-                    isDubbed: subOrDub === models_1.SubOrSub.DUB,
-                };
-            })
-                .get()
-                .filter(Boolean);
-        };
-        if (customBaseURL) {
-            if (customBaseURL.startsWith('http://') || customBaseURL.startsWith('https://')) {
-                this.baseUrl = customBaseURL;
-            }
-            else {
-                this.baseUrl = `http://${customBaseURL}`;
-            }
-        }
-        else {
-            this.baseUrl = this.baseUrl;
-        }
-    }
-    /**
-     * @param page number
-     */
-    fetchTopAiring(page = 1) {
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/trending?page=${page}`);
-    }
-    /**
-     * @param page number
-     */
-    fetchRecentlyUpdated(page = 1) {
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/recent-episode/sub?page=${page}`);
-    }
-    /**
-     * @param page number
-     */
-    fetchMovie(page = 1) {
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/type/movie?page=${page}`);
-    }
-    /**
-     * @param page number
-     */
-    fetchTV(page = 1) {
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/type/tv?page=${page}`);
-    }
-    /**
-     * @param page number
-     */
-    fetchOVA(page = 1) {
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/type/ova?page=${page}`);
-    }
-    /**
-     * @param page number
-     */
-    fetchONA(page = 1) {
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/type/ona?page=${page}`);
-    }
-    /**
-     * @param page number
-     */
-    fetchSpecial(page = 1) {
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/type/special?page=${page}`);
-    }
-    async fetchGenres() {
-        try {
-            const res = [];
-            const { data } = await this.client.get(`${this.baseUrl}/home`);
-            const $ = (0, cheerio_1.load)(data);
-            $('.nav-genre > .sidebar-grid a').each((i, el) => {
-                res.push($(el).text().trim().toLowerCase());
-            });
-            return res;
-        }
-        catch (err) {
-            throw new Error('Something went wrong. Please try again later.');
-        }
-    }
-    /**
-     * @param page number
-     */
-    genreSearch(genre, page = 1) {
-        if (genre == '') {
-            throw new Error('genre is empty');
-        }
-        if (0 >= page) {
-            page = 1;
-        }
-        return this.scrapeCardPage(`${this.baseUrl}/genre/${genre}?page=${page}`);
-    }
-    async fetchSpotlight() {
-        try {
-            const res = { results: [] };
-            const { data } = await this.client.get(`${this.baseUrl}/home`);
-            const $ = (0, cheerio_1.load)(data);
-            $('.carousel-inner > .carousel-item').each((i, el) => {
-                var _a, _b, _c;
-                const card = $(el);
-                const titleElement = card.find('.slide-title');
-                const id = (_a = card.find('a.anime-play').attr('href')) === null || _a === void 0 ? void 0 : _a.split(`${this.baseUrl}/anime/`)[1];
-                const img = card.find('img.film-poster-img');
-                res.results.push({
-                    id: id,
-                    title: titleElement.text().trim(),
-                    banner: (_c = (_b = card
-                        .find('.main-bg')) === null || _b === void 0 ? void 0 : _b.css('background')) === null || _c === void 0 ? void 0 : _c.replace(/url\(["']?(.+?)["']?\)/, '$1').trim(),
-                    url: `${this.baseUrl}/anime/${id}`,
-                    type: card.find('.anime-type span').text().trim(),
-                    duration: card.find('.anime-duration span').first().text().trim(),
-                    episodes: parseInt(card.find('.anime-duration.bg-purple span').text()) || 0,
-                    description: card
-                        .find('.anime-desc')
-                        .text()
-                        .replace(/\s*\n\s*/g, ' ')
-                        .trim(),
-                });
-            });
-            return res;
-        }
-        catch (error) {
-            throw new Error('Something went wrong. Please try again later.');
-        }
-    }
-    async fetchSearchSuggestions(query) {
-        try {
-            const encodedQuery = encodeURIComponent(query);
-            const { data } = await this.client.get(`${this.apiUrl}/live-search/${encodedQuery}`);
-            const res = {
-                results: [],
-            };
-            data.map((item) => {
-                res.results.push({
-                    image: `${this.baseUrl}${item.thumbnail}` || `${this.baseUrl}${item.webp}`,
-                    id: `${item.slug}$${item.id}`,
-                    title: item.en_name,
-                    japaneseTitle: item.anime_name,
-                    releaseDate: item.year_name,
-                    url: `${this.baseUrl}/anime/${item.slug}`,
-                });
-            });
-            return res;
-        }
-        catch (error) {
-            throw new Error('Something went wrong. Please try again later.');
-        }
-    }
-}
-(async () => {
-    const animeowl = new AnimeOwl();
-    const search = await animeowl.fetchSpotlight();
-    const info = await animeowl.fetchAnimeInfo(search.results[0].id);
-    // const sources = await animeowl.fetchEpisodeSources(info.episodes![0].id,StreamingServers.Luffy, SubOrSub.DUB);
-    // console.log(info);
-})();
-exports.default = AnimeOwl;
-//# sourceMappingURL=animeowl.js.map
\ No newline at end of file
diff --git a/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js.map b/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js.map
index d4f4545..e69de29 100644
--- a/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js.map
+++ b/node_modules/@consumet/extensions/dist/providers/anime/animeowl.js.map
@@ -1 +0,0 @@
-{"version":3,"file":"animeowl.js","sourceRoot":"","sources":["../../../src/providers/anime/animeowl.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@consumet/extensions/dist/providers/movies/index.d.ts b/node_modules/@consumet/extensions/dist/providers/movies/index.d.ts
index 1d2b1c4..6ad583c 100644
--- a/node_modules/@consumet/extensions/dist/providers/movies/index.d.ts
+++ b/node_modules/@consumet/extensions/dist/providers/movies/index.d.ts
@@ -2,15 +2,14 @@ import DramaCool from './dramacool';
 import FlixHQ from './flixhq';
 import Fmovies from './fmovies';
 import Goku from './goku';
+import HiMovies from './himovies';
 import KissAsian from './kissasian';
 import MovieHdWatch from './movidhdwatch';
+import MultiMovies from './multimovies';
+import SFlix from './sflix';
 import SmashyStream from './smashystream';
 import Turkish from './turkish123';
 import ViewAsian from './viewAsian';
-import SFlix from './sflix';
-import MultiMovies from './multimovies';
-import NetflixMirror from './netflixmirror';
-import HiMovies from './himovies';
 declare const _default: {
     DramaCool: typeof DramaCool;
     FlixHQ: typeof FlixHQ;
@@ -23,7 +22,6 @@ declare const _default: {
     Turkish: typeof Turkish;
     SFlix: typeof SFlix;
     MultiMovies: typeof MultiMovies;
-    NetflixMirror: typeof NetflixMirror;
     HiMovies: typeof HiMovies;
 };
 export default _default;
diff --git a/node_modules/@consumet/extensions/dist/providers/movies/index.js b/node_modules/@consumet/extensions/dist/providers/movies/index.js
index 3b7417a..fd024b0 100644
--- a/node_modules/@consumet/extensions/dist/providers/movies/index.js
+++ b/node_modules/@consumet/extensions/dist/providers/movies/index.js
@@ -14,7 +14,6 @@ const turkish123_1 = __importDefault(require("./turkish123"));
 const viewAsian_1 = __importDefault(require("./viewAsian"));
 const sflix_1 = __importDefault(require("./sflix"));
 const multimovies_1 = __importDefault(require("./multimovies"));
-const netflixmirror_1 = __importDefault(require("./netflixmirror"));
 const himovies_1 = __importDefault(require("./himovies"));
 exports.default = {
     DramaCool: dramacool_1.default,
@@ -28,7 +27,6 @@ exports.default = {
     Turkish: turkish123_1.default,
     SFlix: sflix_1.default,
     MultiMovies: multimovies_1.default,
-    NetflixMirror: netflixmirror_1.default,
     HiMovies: himovies_1.default,
 };
 //# sourceMappingURL=index.js.map
\ No newline at end of file
diff --git a/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.d.ts b/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.d.ts
index 2505a01..e69de29 100644
--- a/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.d.ts
+++ b/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.d.ts
@@ -1,37 +0,0 @@
-import { MovieParser, TvType, type IMovieInfo, type IEpisodeServer, type ISource, type IMovieResult, type ISearch } from '../../models';
-declare class NetflixMirror extends MovieParser {
-    readonly name = "NetflixMirror";
-    protected baseUrl: string;
-    protected logo: string;
-    protected classPath: string;
-    supportedTypes: Set<TvType>;
-    private nfCookie;
-    constructor(customBaseURL?: string);
-    private initCookie;
-    private Headers;
-    /**
-     *
-     * @param query search query string
-     * @param page page number (default 1) (optional)
-     */
-    search: (query: string, page?: number) => Promise<ISearch<IMovieResult>>;
-    private fetchAllEpisodesForSeason;
-    private fetchAllEpisodesOrdered;
-    /**
-     *
-     * @param mediaId media link or id
-     */
-    fetchMediaInfo: (mediaId: string) => Promise<IMovieInfo>;
-    /**
-     *
-     * @param episodeId episode id
-     * @param media media id
-     */
-    fetchEpisodeSources: (episodeId: string, mediaId?: string) => Promise<ISource>;
-    /**
-     * @deprecated method not implemented
-     * @param episodeId takes episode link or movie id
-     */
-    fetchEpisodeServers: (episodeId: string) => Promise<IEpisodeServer[]>;
-}
-export default NetflixMirror;
diff --git a/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js b/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js
index 40f8a00..e69de29 100644
--- a/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js
+++ b/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js
@@ -1,237 +0,0 @@
-"use strict";
-Object.defineProperty(exports, "__esModule", { value: true });
-const models_1 = require("../../models");
-class NetflixMirror extends models_1.MovieParser {
-    constructor(customBaseURL) {
-        super(...arguments);
-        this.name = 'NetflixMirror';
-        this.baseUrl = 'https://netfree2.cc';
-        this.logo = 'https://netfree2.cc//mobile/img/nf2/icon_x192.png';
-        this.classPath = 'MOVIES.NetflixMirror';
-        this.supportedTypes = new Set([models_1.TvType.MOVIE, models_1.TvType.TVSERIES]);
-        this.nfCookie = 'hd=on;';
-        /**
-         *
-         * @param query search query string
-         * @param page page number (default 1) (optional)
-         */
-        this.search = async (query, page = 1) => {
-            const searchResult = {
-                currentPage: page,
-                hasNextPage: false,
-                results: [],
-            };
-            try {
-                const { data } = await this.client.get(`https://netmirror.8man.me/api/net-proxy?isPrime=false&url=${this.baseUrl}/mobile/search.php?s=${encodeURI(query)}`, {
-                    headers: this.Headers(),
-                });
-                const basicResults = data.searchResult || [];
-                if (basicResults.length === 0) {
-                    return searchResult;
-                }
-                const detailedResults = await Promise.all(basicResults.map(async (item) => {
-                    var _a, _b;
-                    try {
-                        // Fetch additional details for each item
-                        const detailResponse = await this.client.get(`https://netmirror.8man.me/api/net-proxy?isPrime=false&url=${this.baseUrl}/mobile/post.php?id=${item.id}`, {
-                            headers: this.Headers(),
-                        });
-                        return {
-                            id: item.id,
-                            title: item.t,
-                            image: `https://imgcdn.media/poster/v/${item.id}.jpg`,
-                            type: detailResponse.data.type === 't' ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE,
-                            releaseDate: detailResponse.data.year,
-                            seasons: (_b = (_a = detailResponse.data.season) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : undefined,
-                        };
-                    }
-                    catch (error) {
-                        // If we can't fetch details, just return the basic info
-                        console.error(`Error fetching details for ${item.id}:`, error);
-                        return {
-                            id: item.id,
-                            title: item.t,
-                            image: `https://imgcdn.media/poster/v/${item.id}.jpg`,
-                        };
-                    }
-                }));
-                searchResult.results = detailedResults;
-                return searchResult;
-            }
-            catch (err) {
-                throw new Error(err.message);
-            }
-        };
-        /**
-         *
-         * @param mediaId media link or id
-         */
-        this.fetchMediaInfo = async (mediaId) => {
-            var _a, _b, _c, _d;
-            const movieInfo = {
-                id: mediaId,
-                title: '',
-            };
-            try {
-                const { data } = await this.client.get(`https://netmirror.8man.me/api/net-proxy?isPrime=false&url=${this.baseUrl}/mobile/post.php?id=${mediaId}`, {
-                    headers: this.Headers(),
-                });
-                movieInfo.cover = `https://imgcdn.media/poster/h/${mediaId}.jpg`;
-                movieInfo.title = data.title;
-                movieInfo.image = `https://imgcdn.media/poster/v/${mediaId}.jpg`;
-                movieInfo.description = (_b = (_a = data.desc) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : '';
-                movieInfo.type = data.type === 't' ? models_1.TvType.TVSERIES : models_1.TvType.MOVIE;
-                movieInfo.releaseDate = data.year;
-                movieInfo.genres = (_d = (_c = data.genre) === null || _c === void 0 ? void 0 : _c.split(',').map((genre) => genre === null || genre === void 0 ? void 0 : genre.trim())) !== null && _d !== void 0 ? _d : [];
-                movieInfo.duration = data.runtime;
-                if (movieInfo.type === models_1.TvType.TVSERIES) {
-                    movieInfo.episodes = await this.fetchAllEpisodesOrdered(data.season, mediaId);
-                }
-                else {
-                    movieInfo.episodes = [
-                        {
-                            id: mediaId,
-                            title: data.title,
-                            image: movieInfo.cover || movieInfo.image,
-                        },
-                    ];
-                }
-                return movieInfo;
-            }
-            catch (err) {
-                throw new Error(err.message);
-            }
-        };
-        /**
-         *
-         * @param episodeId episode id
-         * @param media media id
-         */
-        this.fetchEpisodeSources = async (episodeId, mediaId //just placeholder for compatibility with tmdb
-        ) => {
-            var _a, _b;
-            try {
-                if (!this.nfCookie) {
-                    await this.initCookie();
-                }
-                const { data } = await this.client.get(`https://netmirror.8man.me/api/net-proxy?isPrime=false&url=${this.baseUrl}/mobile/playlist.php?id=${episodeId}`, {
-                    headers: this.Headers(),
-                });
-                const sources = {
-                    sources: [],
-                    subtitles: [],
-                };
-                (_a = data[0].sources) === null || _a === void 0 ? void 0 : _a.map((source) => {
-                    var _a;
-                    sources.sources.push({
-                        url: `${this.baseUrl}${source.file.replace(/%3A%3Asu/g, '%3A%3Ani').replace(/::su/g, '::ni')}`,
-                        quality: source.label === 'Auto' ? source.label.toLowerCase() : (_a = source.file.match(/[?&]q=([^&]+)/)) === null || _a === void 0 ? void 0 : _a[1],
-                        isM3U8: source.file.includes('.m3u8'),
-                    });
-                });
-                (_b = data[0].tracks) === null || _b === void 0 ? void 0 : _b.map((subtitle) => {
-                    sources.subtitles = sources.subtitles || [];
-                    sources.subtitles.push({
-                        url: `https:${subtitle.file}`,
-                        lang: subtitle.label,
-                    });
-                });
-                return sources;
-            }
-            catch (error) {
-                throw new Error(error.message);
-            }
-        };
-        /**
-         * @deprecated method not implemented
-         * @param episodeId takes episode link or movie id
-         */
-        this.fetchEpisodeServers = async (episodeId) => {
-            throw new Error('Method not implemented.');
-        };
-        if (customBaseURL) {
-            if (customBaseURL.startsWith('http://') || customBaseURL.startsWith('https://')) {
-                this.baseUrl = customBaseURL;
-            }
-            else {
-                this.baseUrl = `http://${customBaseURL}`;
-            }
-        }
-        else {
-            this.baseUrl = this.baseUrl;
-        }
-        this.initCookie();
-    }
-    async initCookie() {
-        try {
-            const { data } = await this.client.get('https://raw.githubusercontent.com/2004durgesh/nfmirror-cookies/refs/heads/main/captured-cookies.json');
-            for (const cookie of data.cookiesByDomain['.netfree2.cc']) {
-                this.nfCookie += `${cookie.name}=${cookie.value.replace('%3A%3Asu', '%3A%3Ani')};`;
-            }
-        }
-        catch (err) {
-            console.error('Failed to get cookie:', err);
-        }
-    }
-    Headers() {
-        const headers = {
-            authority: 'netfree2.cc',
-            accept: 'application/json, text/javascript, */*; q=0.01',
-            'sec-ch-ua': '"Not A(Brand";v="99", "Microsoft Edge";v="121", "Chromium";v="121"',
-            'sec-ch-ua-mobile': '?0',
-            'sec-ch-ua-platform': '"Windows"',
-            'sec-fetch-dest': 'empty',
-            'sec-fetch-mode': 'cors',
-            'sec-fetch-site': 'same-origin',
-            'x-requested-with': 'XMLHttpRequest',
-            Referer: `${this.baseUrl}/mobile/home`,
-            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36',
-        };
-        if (this.nfCookie) {
-            headers.Cookie = this.nfCookie || '';
-        }
-        return headers;
-    }
-    async fetchAllEpisodesForSeason(seasonId, seriesId) {
-        var _a;
-        let page = 1;
-        let episodes = [];
-        while (true) {
-            const url = `https://netfree2.cc/mobile/episodes.php?s=${seasonId}&series=${seriesId}&page=${page}`;
-            const { data } = await this.client.get(url);
-            if ((_a = data.episodes) === null || _a === void 0 ? void 0 : _a.length) {
-                episodes.push(...data.episodes.map((episode) => ({
-                    id: episode.id,
-                    title: episode.t,
-                    season: parseInt(String(episode.s).replace('S', '')),
-                    number: parseInt(String(episode.ep).replace('E', '')),
-                    image: `https://imgcdn.media/epimg/150/${episode.id}.jpg`,
-                })));
-            }
-            if (data.nextPageShow !== 1)
-                break; // no more pages
-            page++;
-        }
-        return episodes;
-    }
-    async fetchAllEpisodesOrdered(seasons, seriesId) {
-        const allEpisodes = [];
-        for (const season of seasons.sort((a, b) => Number(a.s) - Number(b.s))) {
-            const seasonEpisodes = await this.fetchAllEpisodesForSeason(season.id, seriesId);
-            allEpisodes.push(...seasonEpisodes);
-        }
-        return allEpisodes;
-    }
-}
-// (async () => {
-//   const movie = new NetflixMirror();
-//   const search = await movie.search('one');
-//   // const movieInfo = await movie.fetchMediaInfo(search.results[0]?.id);
-//   // const sources = await movie.fetchEpisodeSources(movieInfo.episodes![0]?.id);
-//   //   const server = await movie.fetchEpisodeServers(search.results[0]?.id);
-//   // const recentTv = await movie.fetchPopular();
-//   // const genre = await movie.fetchByGenre('action');
-//   console.log(search);
-// })();
-exports.default = NetflixMirror;
-//# sourceMappingURL=netflixmirror.js.map
\ No newline at end of file
diff --git a/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js.map b/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js.map
index 3358954..e69de29 100644
--- a/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js.map
+++ b/node_modules/@consumet/extensions/dist/providers/movies/netflixmirror.js.map
@@ -1 +0,0 @@
-{"version":3,"file":"netflixmirror.js","sourceRoot":"","sources":["../../../src/providers/movies/netflixmirror.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@consumet/extensions/dist/utils/providers-list.d.ts b/node_modules/@consumet/extensions/dist/utils/providers-list.d.ts
index 601048d..bb58f8c 100644
--- a/node_modules/@consumet/extensions/dist/utils/providers-list.d.ts
+++ b/node_modules/@consumet/extensions/dist/utils/providers-list.d.ts
@@ -4,12 +4,12 @@
  * add new providers here (order does not matter)
  */
 export declare const PROVIDERS_LIST: {
-    ANIME: (import("../providers/anime/gogoanime").default | import("../providers/anime/9anime").default | import("../providers/anime/animepahe").default | import("../providers/anime/zoro").default | import("../providers/anime/animefox").default | import("../providers/anime/anify").default | import("../providers/anime/crunchyroll").default | import("../providers/anime/bilibili").default | import("../providers/anime/marin").default | import("../providers/anime/animekai").default | import("../providers/anime/animeowl").default)[];
+    ANIME: (import("../providers/anime/gogoanime").default | import("../providers/anime/9anime").default | import("../providers/anime/animepahe").default | import("../providers/anime/zoro").default | import("../providers/anime/animefox").default | import("../providers/anime/anify").default | import("../providers/anime/crunchyroll").default | import("../providers/anime/bilibili").default | import("../providers/anime/marin").default | import("../providers/anime/animekai").default)[];
     MANGA: (import("../providers/manga/mangadex").default | import("../providers/manga/comick").default | import("../providers/manga/mangahere").default | import("../providers/manga/mangakakalot").default | import("../providers/manga/mangasee123").default | import("../providers/manga/mangapark").default | import("../providers/manga/mangapill").default | import("../providers/manga/mangareader").default | import("../providers/manga/flamescans").default | import("../providers/manga/mangahost").default | import("../providers/manga/brmangas").default)[];
     BOOKS: import("../providers/books/libgen").default[];
     COMICS: import("../providers/comics/getComics").default[];
     LIGHT_NOVELS: import("../providers/light-novels/readlightnovels").default[];
-    MOVIES: (import("../providers/movies/dramacool").default | import("../providers/movies/flixhq").default | import("../providers/movies/fmovies").default | import("../providers/movies/goku").default | import("../providers/movies/kissasian").default | import("../providers/movies/movidhdwatch").default | import("../providers/movies/viewAsian").default | import("../providers/movies/sflix").default | import("../providers/movies/multimovies").default | import("../providers/movies/netflixmirror").default | import("../providers/movies/himovies").default)[];
+    MOVIES: (import("../providers/movies/dramacool").default | import("../providers/movies/flixhq").default | import("../providers/movies/fmovies").default | import("../providers/movies/goku").default | import("../providers/movies/kissasian").default | import("../providers/movies/movidhdwatch").default | import("../providers/movies/viewAsian").default | import("../providers/movies/sflix").default | import("../providers/movies/multimovies").default | import("../providers/movies/himovies").default)[];
     NEWS: import("../providers/news/animenewsnetwork").default[];
     META: (import("../providers/meta/anilist").default | import("../providers/meta/mal").default | import("../providers/meta/tmdb").default)[];
     OTHERS: never[];
diff --git a/node_modules/@consumet/extensions/dist/utils/providers-list.js b/node_modules/@consumet/extensions/dist/utils/providers-list.js
index ac3dd78..1a13d15 100644
--- a/node_modules/@consumet/extensions/dist/utils/providers-list.js
+++ b/node_modules/@consumet/extensions/dist/utils/providers-list.js
@@ -19,7 +19,6 @@ exports.PROVIDERS_LIST = {
         new providers_1.ANIME.Zoro(),
         new providers_1.ANIME.Marin(),
         new providers_1.ANIME.AnimeKai(),
-        new providers_1.ANIME.AnimeOwl(),
     ],
     MANGA: [
         new providers_1.MANGA.MangaDex(),
@@ -47,7 +46,6 @@ exports.PROVIDERS_LIST = {
         new providers_1.MOVIES.ViewAsian(),
         new providers_1.MOVIES.SFlix(),
         new providers_1.MOVIES.MultiMovies(),
-        new providers_1.MOVIES.NetflixMirror(),
         new providers_1.MOVIES.HiMovies(),
     ],
     NEWS: [new providers_1.NEWS.ANN()],
